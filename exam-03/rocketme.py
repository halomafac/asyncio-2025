import time
import asyncio
import httpx

student_id = "6610301002"   # üîπ‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á
ROCKET_URL = f"http://172.16.2.117:8088/fire/{student_id}"

async def fire_rocket(name: str, t0: float):
    """‡∏¢‡∏¥‡∏á rocket 1 ‡∏•‡∏π‡∏Å ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ"""
    start_time = time.perf_counter() - t0  # ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå

    async with httpx.AsyncClient() as client:
        resp = await client.get(ROCKET_URL)
        resp.raise_for_status()
        data = resp.json()

    # ‡∏™‡∏°‡∏°‡∏ï‡∏¥ response ‡πÄ‡∏õ‡πá‡∏ô {"time_to_target": 1.73}
    time_to_target = float(data["time_to_target"])

    end_time = time.perf_counter() - t0     # ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠ request ‡πÄ‡∏™‡∏£‡πá‡∏à
    return {
        "name": name,
        "start_time": start_time,
        "time_to_target": time_to_target,
        "end_time": end_time
    }

async def main():
    t0 = time.perf_counter()     # ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î rockets
    print("Rocket prepare to launch ...")

    # üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á task ‡∏¢‡∏¥‡∏á rocket 3 ‡∏•‡∏π‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    tasks = [
        asyncio.create_task(fire_rocket("Rocket-1", t0)),
        asyncio.create_task(fire_rocket("Rocket-2", t0)),
        asyncio.create_task(fire_rocket("Rocket-3", t0))
    ]

    # üîπ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å task ‡πÄ‡∏™‡∏£‡πá‡∏à
    results = await asyncio.gather(*tasks)

    # üîπ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢ (end_time ‡∏´‡∏£‡∏∑‡∏≠ time_to_target ‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô)
    results.sort(key=lambda r: r["end_time"])

    print("Rockets fired:")
    for r in results:
        print(f"{r['name']} | start_time: {r['start_time']:.2f} sec "
              f"| time_to_target: {r['time_to_target']:.2f} sec "
              f"| end_time: {r['end_time']:.2f} sec")

    # üîπ ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏•‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏ä‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
    t_total = max(r["end_time"] for r in results)
    print(f"\nTotal time for all rockets: {t_total:.2f} sec")


if __name__ == "__main__":
    asyncio.run(main())

